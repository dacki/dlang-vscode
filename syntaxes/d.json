{
    "scopeName": "source.d",
    "fileTypes": [
        "d",
        "di"
    ],
    "patterns": [
        {
            "name": "meta.section.module.d",
            "match": "\\b(module)\\s+([\\w.]+)",
            "captures": {
                "1": {
                    "name": "storage.type.d"
                },
                "2": {
                    "name": "entity.name.section.module.d"
                }
            }
        },
        {
            "name": "meta.import.d",
            "match": "\\b((?:static|public)\\s+)?(import)\\s+([^;]+)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                "2": {
                    "name": "keyword.control.d"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#import-bindings"
                        },
                        {
                            "include": "#import-aliases"
                        }
                    ]
                }
            }
        },
        {
            "name": "meta.pragma.d",
            "begin": "\\b(pragma)\\s*\\(\\s*(\\w+)",
            "end": "\\)",
            "captures": {
                "1": {
                    "name": "keyword.other.d"
                },
                "2": {
                    "patterns": [
                        {
                            "name": "support.constant.pragma.d",
                            "match": "\\b(inline|lib|mangle|msg|startaddress)\\b"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "$self"
                },
                {
                    "include": "#.util-count-parens"
                }
            ]
        },
        {
            "name": "meta.linkage.d",
            "match": "\\b(extern)\\s*\\(\\s*(?:(C|D|Objective-C|Pascal|System|Windows)|(C\\+\\+)(?:\\s*,\\s*([\\w.]+))?)\\s*\\)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                "2": {
                    "name": "constant.other.linkage.d"
                },
                "3": {
                    "name": "constant.other.linkage.d"
                },
                "4": {
                    "name": "entity.name.namespace.d"
                }
            }
        },
        {
            "name": "comment.line.number-sign.shebang.d",
            "match": "\\A#!.+"
        },
        {
            "name": "comment.line.double-slash.d",
            "match": "//.*"
        },
        {
            "name": "comment.block.d",
            "begin": "/\\*",
            "end": "\\*/"
        },
        {
            "include": "text.html.javadoc"
        },
        {
            "include": "#comment-block-nested"
        },
        {
            "name": "string.quoted.single.d",
            "match": "'(?:[^\\\\]|(?:\\\\.{1,10}))'",
            "captures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#string-escaped-char"
                        }
                    ]
                }
            }
        },
        {
            "name": "string.quoted.double.delimited.d",
            "begin": "q\"(\\w+)$",
            "end": "^\\1\""
        },
        {
            "name": "string.quoted.double.delimited.d",
            "begin": "q\"(?:\\[|\\(|<|\\{|(\\S))",
            "end": "(?:\\]|\\)|>|\\}|\\1)\""
        },
        {
            "name": "string.quoted.double.hexadecimal.d",
            "begin": "x\"",
            "end": "\"(c|d|w)?",
            "patterns": [
                {
                    "name": "invalid.illegal.non-hex-char.d",
                    "match": "[^\\s\\da-fA-F]"
                }
            ]
        },
        {
            "name": "string.quoted.double.raw.d",
            "begin": "r\"",
            "end": "\"(c|d|w)?"
        },
        {
            "name": "string.quoted.double.d",
            "begin": "\"",
            "end": "\"(c|d|w)?",
            "patterns": [
                {
                    "include": "#string-escaped-char"
                }
            ]
        },
        {
            "name": "string.quoted.other.backtick.raw.d",
            "begin": "`",
            "end": "`(c|d|w)?"
        },
        {
            "name": "string.unquoted.delimited.d",
            "begin": "q{",
            "end": "}",
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        },
        {
            "name": "constant.language.boolean.d",
            "match": "\\b(true|false)\\b"
        },
        {
            "name": "constant.language.null.d",
            "match": "\\bnull\\b"
        },
        {
            "name": "constant.language.d",
            "match": "\\b__((FILE|FILE_FULL_PATH|MODULE|LINE|FUNCTION|PRETTY_FUNCTION)__|parameters)\\b"
        },
        {
            "name": "constant.numeric.float.decimal.d",
            "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?[fFL]?i?\\b"
        },
        {
            "name": "constant.numeric.float.hexadecimal.d",
            "match": "\\b0[xX][\\da-fA-F_]+\\.[\\da-fA-F_]+([pP][+-]?\\d[\\d_]*)?i?\\b"
        },
        {
            "name": "constant.numeric.integer.decimal.d",
            "match": "\\b\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?(L?[uU]?|[uU]L)?i?\\b"
        },
        {
            "name": "constant.numeric.integer.hexadecimal.d",
            "match": "\\b0[xX][\\da-fA-F_]+([pP][+-]?\\d[\\d_]*)?i?\\b"
        },
        {
            "name": "constant.numeric.integer.binary.d",
            "match": "\\b0[bB][01_]+i?\\b"
        },
        {
            "name": "keyword.control.branch.d",
            "match": "\\b(break|case|continue|default|else|goto|if|switch|version)\\b"
        },
        {
            "name": "keyword.control.exception.d",
            "match": "\\b(catch|finally|throw|try)\\b"
        },
        {
            "name": "keyword.control.loop.d",
            "match": "\\b(do|for|foreach(_reverse)?|while)\\b"
        },
        {
            "name": "keyword.control.d",
            "match": "\\b(asm|assert|body|cast|debug|invariant|return|synchronized|with)\\b"
        },
        {
            "name": "keyword.operator.arithmetic.d",
            "match": "\\+|-|\\*|/|~|\\^|\\^\\^"
        },
        {
            "name": "keyword.operator.comparison.d",
            "match": "==|!=|(<|>)=?|<>"
        },
        {
            "name": "keyword.operator.assignment.d",
            "match": "="
        },
        {
            "name": "keyword.operator.logical.d",
            "match": "!|\\|\\||&&"
        },
        {
            "name": "keyword.operator.variadic.d",
            "match": "\\.\\.\\."
        },
        {
            "name": "keyword.operator.slice.d",
            "match": "\\.\\."
        },
        {
            "name": "keyword.operator.d",
            "match": "\\b(delete|in|new)\\b"
        },
        {
            "name": "keyword.other.d",
            "match": "\\b(deprecated|is|macro|mixin|typeid|typeof|unittest|__traits)\\b"
        },
        {
            "name": "storage.modifier.attribute.d",
            "begin": "@\\s*\\w*\\s*\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "$self"
                },
                {
                    "include": "#.util-count-parens"
                }
            ]
        },
        {
            "name": "storage.modifier.attribute.d",
            "match": "@(?:(disable|nogc|property|safe|system|trusted)|\\w+)\\b",
            "captures": {
                "1": {
                    "name": "support.constant.attribute.d"
                }
            }
        },
        {
            "name": "storage.modifier.visibility.d",
            "match": "\\b(export|package|private|protcted|public)\\b"
        },
        {
            "name": "storage.modifier.d",
            "match": "\\b(abstract|alias|align|auto|const|extern|final|immutable|inout|lazy|nothrow|out|override|pure|ref|scope|shared|static|typedef|volatile|__gshared)\\b"
        },
        {
            "name": "storage.type.character.d",
            "match": "\\b(char|dchar|wchar)\\b"
        },
        {
            "name": "storage.type.integer.d",
            "match": "\\b(byte|cent|int|long|short|ubyte|ucent|uint|ulong|ushort)\\b"
        },
        {
            "name": "storage.type.float.d",
            "match": "\\b(cdouble|cfloat|creal|double|float|idouble|ifloat|ireal|real)\\b"
        },
        {
            "name": "storage.type.d",
            "match": "\\b(bool|class|delegate|enum|function|interface|struct|template|union|void|__vector)\\b"
        },
        {
            "name": "variable.language.d",
            "match": "\\b(super|this)\\b"
        },
        {
            "name": "support.type.string.d",
            "match": "\\b(dstring|string|wstring)\\b"
        },
        {
            "match": "\\S+\\.(alignof|classinfo|dig|epsilon|im|infinity|init|mangleof|mant_dig|max|max(?:_10)?_exp|min(?:_10)?_exp|min_normal|nan|re|sizeof|stringof)\\b",
            "captures": {
                "1": {
                    "name": "support.constant.property.d"
                }
            }
        }
    ],
    "repository": {
        "import-bindings": {
            "patterns": [
                {
                    "match": "(?:(\\w+)\\s*(=)\\s*)?([\\w.]+)\\s*(:)\\s*([^;]+)",
                    "captures": {
                        "1": {
                            "name": "entity.name.binding.d"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#import-support"
                                }
                            ]
                        },
                        "4": {
                            "name": "keyword.operator.selection.d"
                        },
                        "5": {
                            "patterns": [
                                {
                                    "include": "#import-bindings-list"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "import-bindings-list": {
            "patterns": [
                {
                    "match": "(?:(\\w+)\\s*(=)\\s*)?(\\w+)(\\s*,[^;]+)?",
                    "captures": {
                        "1": {
                            "name": "entity.name.binding.d"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        "3": {
                            "name": "entity.name.d"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#import-bindings-list"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "import-aliases": {
            "patterns": [
                {
                    "match": "(?:\\s*,\\s*)?(?:(\\w+)\\s*(=)\\s*)?([\\w.]+)\\s*([^;]+)?",
                    "captures": {
                        "1": {
                            "name": "entity.name.binding.d"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#import-support"
                                }
                            ]
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#import-aliases"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "import-support": {
            "patterns": [
                {
                    "name": "support.type.module.d",
                    "match": "\\b(etc\\.c\\.(curl|(odbc\\.(sql|sqlext|sqltypes|sqlucode)|sqlite3|zlib))|core\\.(atomic|attribute|bitop|checkint|cpuid|demangle|exception|math|memory|runtime|simd|stdc\\.(complex|ctype|errno|fenv|float_|inttypes|limits|locale|math|signal|stdarg|stdef|stdint|stdio|stdlib|string|tgmath|time|wchar_|wctype)|stdcpp\\.(exception|typeinfo)|sync\\.(barrier|condition|config|exception|mutex|rwmutex|semaphore)|thread|time|vararg)|std\\.(algorithm(\\.(comparison|iteration|mutation|searching|setops|sorting))?|array|ascii|base64|bigint|bitmanip|compiler|complex|concurrency|container(\\.(array|binaryheap|dlist|rbtree|slist|util))?|conv|csv|datetime|demangle|digest\\.(crc|digest|hmac|md|murmurhash|ripemd|sha)|encoding|exception|file|format|functional|getopt|json|math|mathspecial|meta|mmfile|net\\.(curl|isemail)|numeric|outbuffer|parallelism|path|process|random|range(\\.(interfaces|primitives))?|regex|signals|socket|stdint|stdio|string|system|traits|typecons|typetuple|uni|uri|utf|uuid|variant|windows\\.(charset|syserror)|xml|zip|zlib))\\b"
                },
                {
                    "name": "entity.name.section.module.d",
                    "match": "\\b[\\w.]+\\b"
                }
            ]
        },
        "comment-block-nested": {
            "patterns": [
                {
                    "name": "comment.block.nested.d",
                    "begin": "/\\+",
                    "end": "\\+/",
                    "patterns": [
                        {
                            "include": "#comment-block-nested"
                        }
                    ]
                }
            ]
        },
        "string-escaped-char": {
            "patterns": [
                {
                    "name": "constant.character.escape.d",
                    "match": "\\\\(['\"?\\\\0abnfrtv]|x[\\da-fA-F]{2}|[0-3]?[0-7]{1,2}|u[\\da-fA-F]{4}|U[\\da-fA-F]{8}|&[a-zA-Z]{1,8};)"
                }
            ]
        },
        ".util-count-parens": {
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#.util-count-parens"
                        }
                    ]
                }
            ]
        }
    }
}